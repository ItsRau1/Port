"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.handleAction = void 0;
const defaults_1 = require("../../defaults");
const delete_1 = require("./delete");
const function_1 = require("./function");
const handleAction = (props, pack, moveOn) => {
    var _a, _b;
    const rotateDataIndex = pack.currentDataRotateIndex % pack.copyDataToRotate.length;
    const textBlocks = pack.copyDataToRotate[rotateDataIndex];
    const currentBlock = textBlocks[pack.blockPointer];
    switch (currentBlock.action) {
        case "delete":
            /**
             *  Store these two pointers since we will use these pointers in handleDelete function.
             *  After handleDelete finishes, we will restore these pointers.
             *  Like in MIPS stack.
             */
            pack.deleteCache.original_internalBlockPointer = pack.internalBlockPointer;
            pack.deleteCache.original_blockPointer = pack.blockPointer;
            pack.timeoutTick = window.setTimeout(() => {
                (0, delete_1.handleDelete)(props, pack, moveOn, currentBlock.amount);
            }, (_a = currentBlock.wait) !== null && _a !== void 0 ? _a : defaults_1.DefaultSetting.ActionBlock.delete.wait);
            break;
        case "function":
            pack.timeoutTick = window.setTimeout(() => {
                (0, function_1.handleFunction)(props, pack, moveOn, currentBlock.func);
            }, (_b = currentBlock.wait) !== null && _b !== void 0 ? _b : defaults_1.DefaultSetting.ActionBlock.function.wait);
            break;
    }
};
exports.handleAction = handleAction;
