import React from "react";
export declare type WordBlock = {
    type: "word";
    text: string;
    spanClass?: string;
    cursor?: {
        char?: string;
        cursorClass?: string;
    };
    override?: {
        maxTypespeed?: number;
        typeVariance?: number;
        maxDeleteSpeed?: number;
        deleteVariance?: number;
    };
};
export declare type ActionBlock = {
    type: "action";
} & Action;
declare type Action = {
    action: "delete";
    amount: number;
    wait?: number;
} | {
    action: "function";
    func: () => void;
    wait?: number;
};
export declare type PackInfo = {
    containerRef: React.RefObject<HTMLSpanElement>;
    contentRef: React.RefObject<HTMLSpanElement>;
    cursorRef: React.RefObject<HTMLSpanElement>;
    copyDataToRotate: (WordBlock | ActionBlock)[][];
    internalBlockPointer: number;
    blockPointer: number;
    HTMLPointer: number;
    currentHTML: string;
    currentDataRotateIndex: number;
    isDeleting: boolean;
    timeoutTick: number;
    deleteCache: {
        original_internalBlockPointer: number;
        original_blockPointer: number;
    };
    cursorCache: {
        prevCursorClass: string;
    };
    timeoutBlinkCursor: number;
};
export declare type TypewriterProps = {
    dataToRotate: (WordBlock | ActionBlock)[][];
    cursor?: {
        char?: string;
        cursorBlinkRate?: string;
        timeBeforeBlinkCursor?: number;
    };
    timeBeforeDelete?: number;
    timeBeforeWriteNewRotateData?: number;
    maxTypeSpeed?: number;
    typeVariance?: number;
    maxDeleteSpeed?: number;
    deleteVariance?: number;
    start?: boolean;
    loop?: boolean;
    containerClass?: string;
    contentClass?: string;
    cursorClass?: string;
};
export declare enum TypewriterClassNames {
    Container = "Typewriter-container",
    Content = "Typewriter-content",
    Cursor = "Typewriter-cursor",
    Blink = "Typewriter-blink",
    Blink_Keyframe = "Typewriter-blink-keyframe"
}
export {};
