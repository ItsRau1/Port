"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.unblinkCursor = exports.blinkCursor = exports.setCursorClass = void 0;
const jquery_1 = __importDefault(require("jquery"));
const defaults_1 = require("../defaults");
const types_1 = require("../types");
const setCursorClass = (props, pack) => {
    var _a, _b, _c, _d;
    const { cursor } = props;
    const { current: cursorCurrent } = pack.cursorRef;
    const rotateDataIndex = pack.currentDataRotateIndex % pack.copyDataToRotate.length;
    const textBlocks = pack.copyDataToRotate[rotateDataIndex];
    const currentBlock = textBlocks[pack.blockPointer];
    if (!cursorCurrent) {
        return;
    }
    /**
     *  We only care when current block is WordBlock and non-empty
     */
    if (currentBlock.type === "word" && currentBlock.text !== "") {
        /**
         *  Update cursor character if applicable
         */
        if ((_a = currentBlock.cursor) === null || _a === void 0 ? void 0 : _a.char) {
            cursorCurrent.textContent = currentBlock.cursor.char;
        }
        else {
            cursorCurrent.textContent = (_b = cursor === null || cursor === void 0 ? void 0 : cursor.char) !== null && _b !== void 0 ? _b : defaults_1.DefaultSetting.cursor.char;
        }
        /**
         *  We remove cursor style completely when encountering a block that does not have cursorClass.
         */
        if (!((_c = currentBlock.cursor) === null || _c === void 0 ? void 0 : _c.cursorClass)) {
            (0, jquery_1.default)(cursorCurrent).removeClass(pack.cursorCache.prevCursorClass);
            pack.cursorCache.prevCursorClass = "";
        }
        /**
         *  We set cursor style when current block has cursorClass but has not applied to cursor current
         */
        if (((_d = currentBlock.cursor) === null || _d === void 0 ? void 0 : _d.cursorClass) && !(0, jquery_1.default)(cursorCurrent).hasClass(currentBlock.cursor.cursorClass)) {
            (0, jquery_1.default)(cursorCurrent).removeClass(pack.cursorCache.prevCursorClass);
            pack.cursorCache.prevCursorClass = currentBlock.cursor.cursorClass;
            (0, jquery_1.default)(cursorCurrent).addClass(currentBlock.cursor.cursorClass);
        }
    }
};
exports.setCursorClass = setCursorClass;
const blinkCursor = (props, pack) => {
    var _a, _b;
    const cursorBlinkRate = (_a = props.cursor) === null || _a === void 0 ? void 0 : _a.cursorBlinkRate;
    const timeBeforeBlinkCursor = (_b = props.cursor) === null || _b === void 0 ? void 0 : _b.timeBeforeBlinkCursor;
    pack.timeoutBlinkCursor = window.setTimeout(() => {
        const { current: cursorCurrent } = pack.cursorRef;
        if (cursorCurrent) {
            blinkCursorHelper(cursorCurrent, cursorBlinkRate !== null && cursorBlinkRate !== void 0 ? cursorBlinkRate : defaults_1.DefaultSetting.cursor.cursorBlinkRate, true);
        }
    }, timeBeforeBlinkCursor !== null && timeBeforeBlinkCursor !== void 0 ? timeBeforeBlinkCursor : defaults_1.DefaultSetting.cursor.timeBeforeBlinkCursor);
};
exports.blinkCursor = blinkCursor;
const unblinkCursor = (props, pack) => {
    var _a, _b;
    const cursorBlinkRate = (_a = props.cursor) === null || _a === void 0 ? void 0 : _a.cursorBlinkRate;
    const timeBeforeBlinkCursor = (_b = props.cursor) === null || _b === void 0 ? void 0 : _b.timeBeforeBlinkCursor;
    const { current: cursorCurrent } = pack.cursorRef;
    if (!cursorCurrent) {
        return;
    }
    // Clear blinking cursor
    if (pack.timeoutBlinkCursor !== -1) {
        blinkCursorHelper(cursorCurrent, cursorBlinkRate !== null && cursorBlinkRate !== void 0 ? cursorBlinkRate : defaults_1.DefaultSetting.cursor.cursorBlinkRate, false);
        window.clearTimeout(pack.timeoutBlinkCursor);
        // Blink when timeout. This can terminate due to handleAction or handleWord.
        pack.timeoutBlinkCursor = window.setTimeout(() => {
            if (cursorCurrent) {
                blinkCursorHelper(cursorCurrent, cursorBlinkRate !== null && cursorBlinkRate !== void 0 ? cursorBlinkRate : defaults_1.DefaultSetting.cursor.cursorBlinkRate, true);
            }
        }, timeBeforeBlinkCursor !== null && timeBeforeBlinkCursor !== void 0 ? timeBeforeBlinkCursor : defaults_1.DefaultSetting.cursor.timeBeforeBlinkCursor);
    }
};
exports.unblinkCursor = unblinkCursor;
const blinkCursorHelper = (cursorCurrent, blinkRate, blink) => {
    if (blink) {
        cursorCurrent.style.setProperty("--cursor-blink-rate", blinkRate);
        (0, jquery_1.default)(cursorCurrent).addClass(types_1.TypewriterClassNames.Blink);
    }
    else {
        (0, jquery_1.default)(cursorCurrent).removeClass(types_1.TypewriterClassNames.Blink);
    }
};
